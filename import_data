{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "859c27e4",
   "metadata": {},
   "outputs": [],
   "source": [
    "import csv\n",
    "import os\n",
    "from decimal import Decimal\n",
    "from datetime import datetime\n",
    "\n",
    "from django.core.management.base import BaseCommand, CommandError\n",
    "from django.db import transaction\n",
    "\n",
    "# Set the Django settings module environment variable\n",
    "os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'SchoolHub.settings')\n",
    "import django\n",
    "django.setup()\n",
    "\n",
    "from accounts.models import User\n",
    "from students.models import (\n",
    "    Student,\n",
    "    Subject,\n",
    "    Grade,\n",
    "    HealthInformation,\n",
    "    EconomicSituation,\n",
    "    SocialMediaAndTechnology,\n",
    ")\n",
    "\n",
    "class Command(BaseCommand):\n",
    "    help = \"Import the first 5000 rows from cleaned_student_data.csv into Student and related models.\"\n",
    "\n",
    "    def parse_date(self, s):\n",
    "        \"\"\"Convert a string in 'YYYY-MM-DD' format to a date object.\"\"\"\n",
    "        try:\n",
    "            return datetime.strptime(s, \"%Y-%m-%d\").date()\n",
    "        except Exception:\n",
    "            return None\n",
    "\n",
    "    def parse_decimal(self, s):\n",
    "        \"\"\"Convert a string to a Decimal. Returns 0.0 if conversion fails.\"\"\"\n",
    "        try:\n",
    "            return Decimal(s)\n",
    "        except Exception:\n",
    "            return Decimal(\"0.0\")\n",
    "\n",
    "    def parse_float(self, s):\n",
    "        \"\"\"Convert a string to a float. Returns 0.0 if conversion fails.\"\"\"\n",
    "        try:\n",
    "            return float(s)\n",
    "        except Exception:\n",
    "            return 0.0\n",
    "\n",
    "    def str_to_bool(self, s):\n",
    "        \"\"\"Convert a string to a boolean value. Returns True if the string indicates 'yes', 'true', or '1'.\"\"\"\n",
    "        if isinstance(s, str):\n",
    "            return s.strip().lower() in ['yes', 'true', '1']\n",
    "        return bool(s)\n",
    "\n",
    "    def handle(self, *args, **options):\n",
    "        # Define the path to the cleaned CSV file\n",
        csv_path = r"C:\Users\laptop\Desktop\school_management_system\students\cleaned_student_data.csv"
    "        if not os.path.exists(csv_path):\n",
    "            raise CommandError(f\"The file {csv_path} does not exist.\")\n",
    "\n",
    "        # Delete all existing Student records for testing purposes\n",
    "        Student.objects.all().delete()\n",
    "        self.stdout.write(\"All existing Student records have been deleted for testing purposes.\")\n",
    "\n",
    "        # Open the CSV file and read its content using DictReader\n",
    "        with open(csv_path, mode='r', encoding='utf-8', newline='') as file:\n",
    "            reader = csv.DictReader(file)\n",
    "            rows = list(reader)\n",
    "            # Limit to the first 5000 rows\n",
    "            rows = rows[:5000]\n",
    "\n",
    "            success_count = 0\n",
    "            error_count = 0\n",
    "\n",
    "            for idx, row in enumerate(rows):\n",
    "                self.stdout.write(f\"Processing row {idx+1}...\")\n",
    "                try:\n",
    "                    with transaction.atomic():\n",
    "                        # Process user information\n",
    "                        username = row.get('user', '').strip()\n",
    "                        if not username:\n",
    "                            raise ValueError(\"Missing 'user' field.\")\n",
    "                        email = row.get('email', f\"{username}@example.com\").strip()\n",
    "                        user_obj, created = User.objects.get_or_create(\n",
    "                            username=username,\n",
    "                            defaults={'email': email}\n",
    "                        )\n",
    "\n",
    "                        # Process Student data\n",
    "                        enrollment_date = self.parse_date(row.get('enrollment_date', ''))\n",
    "                        dob = self.parse_date(row.get('date_of_birth', ''))\n",
    "                        if not enrollment_date or not dob:\n",
    "                            raise ValueError(\"Missing enrollment_date or date_of_birth.\")\n",
    "                        gender = row.get('gender', 'Male').strip()\n",
    "                        student_defaults = {\n",
    "                            \"full_name\": row.get('full_name', '').strip(),\n",
    "                            \"enrollment_date\": enrollment_date,\n",
    "                            \"date_of_birth\": dob,\n",
    "                            \"gender\": gender if gender in [\"Male\", \"Female\"] else \"Male\",\n",
    "                            \"nationality\": row.get('nationality', 'Not Specified').strip(),\n",
    "                            \"address\": row.get('address', 'Not Specified').strip(),\n",
    "                            \"profile_image\": row.get('profile_image', '').strip(),\n",
    "                            \"email\": email,\n",
    "                            \"mobile\": row.get('mobile', '').strip(),\n",
    "                            \"emergency_contact_name\": row.get('emergency_contact_name', 'Not Specified').strip(),\n",
    "                            \"emergency_contact\": row.get('emergency_contact', 'Not Specified').strip(),\n",
    "                            \"guardian_relationship\": row.get('guardian_relationship', 'Other').strip(),\n",
    "                            \"guardian_address\": row.get('guardian_address', 'Not Specified').strip(),\n",
    "                            \"guardian_employment_status\": row.get('guardian_employment_status', 'Employed').strip(),\n",
    "                            \"guardian_monthly_income\": self.parse_decimal(row.get('guardian_monthly_income', '0')),\n",
    "                            \"guardian_education\": row.get('guardian_education', 'Not Specified').strip(),\n",
    "                            \"grade_level\": row.get('grade_level', '').strip(),\n",
    "                            \"attendance_percentage\": self.parse_float(row.get('attendance_percentage', '0')),\n",
    "                            \"awards\": row.get('awards', '').strip(),\n",
    "                            \"seat_zone\": row.get('seat_zone', 'Middle').strip(),\n",
    "                        }\n",
    "                        student_obj, stu_created = Student.objects.update_or_create(\n",
    "                            user=user_obj,\n",
    "                            defaults=student_defaults\n",
    "                        )\n",
    "                        if stu_created:\n",
    "                            self.stdout.write(f\"Created student: {student_obj.full_name}\")\n",
    "                        else:\n",
    "                            self.stdout.write(f\"Updated student: {student_obj.full_name}\")\n",
    "\n",
    "                        # Process Subjects\n",
    "                        subjects_str = row.get('subjects', '').strip()\n",
    "                        if subjects_str:\n",
    "                            student_obj.subjects.clear()\n",
    "                            for subj_name in subjects_str.split(','):\n",
    "                                subj_name = subj_name.strip()\n",
    "                                if subj_name:\n",
    "                                    subj_obj, _ = Subject.objects.get_or_create(name=subj_name)\n",
    "                                    student_obj.subjects.add(subj_obj)\n",
    "\n",
    "                        # Process Grades (formatted as \"subject:score;subject:score;...\")\n",
    "                        grades_str = row.get('grades', '').strip()\n",
    "                        if grades_str:\n",
    "                            for grade_item in grades_str.split(';'):\n",
    "                                if ':' in grade_item:\n",
    "                                    subj, score = grade_item.split(':', 1)\n",
    "                                    subj = subj.strip()\n",
    "                                    score = self.parse_decimal(score.strip())\n",
    "                                    if subj:\n",
    "                                        subj_obj, _ = Subject.objects.get_or_create(name=subj)\n",
    "                                        Grade.objects.create(\n",
    "                                            student=student_obj,\n",
    "                                            subject=subj_obj,\n",
    "                                            score=score\n",
    "                                        )\n",
    "\n",
    "                        # Process HealthInformation data\n",
    "                        raw_family_pressures = row.get('family_pressures', '').strip()\n",
    "                        if raw_family_pressures.lower() in [\"\", \"not specified\"]:\n",
    "                            raw_family_pressures = \"None\"\n",
    "                        health_defaults = {\n",
    "                            \"has_chronic_illness\": self.str_to_bool(row.get('has_chronic_illness', '')),\n",
    "                            \"general_health_status\": row.get('general_health_status', 'good').strip(),\n",
    "                            \"last_medical_checkup\": self.parse_date(row.get('last_medical_checkup', '')),\n",
    "                            \"weight\": self.parse_float(row.get('weight', '0')),\n",
    "                            \"height\": self.parse_float(row.get('height', '0')),\n",
    "                            \"academic_stress\": row.get('academic_stress', 'Moderate').strip(),\n",
    "                            \"motivation\": row.get('motivation', 'Moderate').strip(),\n",
    "                            \"depression\": self.str_to_bool(row.get('depression', '')),\n",
    "                            \"sleep_disorder\": row.get('sleep_disorder', 'None').strip(),\n",
    "                            \"study_life_balance\": row.get('study_life_balance', 'Needs Improvement').strip(),\n",
    "                            \"family_pressures\": raw_family_pressures,\n",
    "                        }\n",
    "                        HealthInformation.objects.update_or_create(\n",
    "                            student=student_obj,\n",
    "                            defaults=health_defaults\n",
    "                        )\n",
    "\n",
    "                        # Process EconomicSituation data\n",
    "                        econ_defaults = {\n",
    "                            \"is_orphan\": self.str_to_bool(row.get('is_orphan', '')),\n",
    "                            \"father_occupation\": row.get('father_occupation', '').strip(),\n",
    "                            \"mother_occupation\": row.get('mother_occupation', '').strip(),\n",
    "                            \"parents_marital_status\": row.get('parents_marital_status', '').strip(),\n",
    "                            \"family_income_level\": self.parse_decimal(row.get('family_income_level', '0')),\n",
    "                            \"income_source\": row.get('income_source', 'Other').strip(),\n",
    "                            \"monthly_expenses\": self.parse_decimal(row.get('monthly_expenses', '0')),\n",
    "                            \"housing_status\": row.get('housing_status', '').strip(),\n",
    "                            \"access_to_electricity\": self.str_to_bool(row.get('access_to_electricity', '')),\n",
    "                            \"has_access_to_water\": self.str_to_bool(row.get('has_access_to_water', '')),\n",
    "                            \"access_to_internet\": self.str_to_bool(row.get('access_to_internet', '')),\n",
    "                            \"has_private_study_room\": self.str_to_bool(row.get('has_private_study_room', '')),\n",
    "                            \"number_of_rooms_in_home\": int(row.get('number_of_rooms_in_home', '0') or 0),\n",
    "                            \"daily_food_availability\": self.str_to_bool(row.get('daily_food_availability', '')),\n",
    "                            \"has_school_uniform\": self.str_to_bool(row.get('has_school_uniform', '')),\n",
    "                            \"has_stationery\": self.str_to_bool(row.get('has_stationery', '')),\n",
    "                            \"receives_scholarship\": self.str_to_bool(row.get('receives_scholarship', '')),\n",
    "                            \"receives_private_tutoring\": self.str_to_bool(row.get('receives_private_tutoring', '')),\n",
    "                            \"daily_study_hours\": self.parse_float(row.get('daily_study_hours', '0')),\n",
    "                            \"works_after_school\": self.str_to_bool(row.get('works_after_school', '')),\n",
    "                            \"work_hours_per_week\": self.parse_float(row.get('work_hours_per_week', '0')),\n",
    "                            \"responsible_for_household_tasks\": self.str_to_bool(row.get('responsible_for_household_tasks', '')),\n",
    "                            \"transportation_mode\": row.get('transportation_mode', '').strip(),\n",
    "                            \"distance_to_school\": self.parse_float(row.get('distance_to_school', '0')),\n",
    "                            \"has_health_insurance\": self.str_to_bool(row.get('has_health_insurance', '')),\n",
    "                            \"household_size\": int(row.get('household_size', '1') or 1),\n",
    "                            \"sibling_rank\": int(row.get('sibling_rank', '0') or 0),\n",
    "                        }\n",
    "                        EconomicSituation.objects.update_or_create(\n",
    "                            student=student_obj,\n",
    "                            defaults=econ_defaults\n",
    "                        )\n",
    "\n",
    "                        # Process SocialMediaAndTechnology data\n",
    "                        raw_smi = row.get('social_media_impact_on_studies', '').strip()\n",
    "                        if raw_smi.lower() in [\"\", \"not specified\"]:\n",
    "                            raw_smi = \"None\"\n",
    "                        raw_ctw = row.get('content_type_watched', '').strip()\n",
    "                        if raw_ctw.lower() in [\"\", \"not specified\"]:\n",
    "                            raw_ctw = \"None\"\n",
    "                        tech_defaults = {\n",
    "                            \"has_electronic_device\": self.str_to_bool(row.get('has_electronic_device', '')),\n",
    "                            \"device_usage_purpose\": row.get('device_usage_purpose', 'Other').strip(),\n",
    "                            \"has_social_media_accounts\": self.str_to_bool(row.get('has_social_media_accounts', '')),\n",
    "                            \"daily_screen_time\": self.parse_float(row.get('daily_screen_time', '0')),\n",
    "                            \"social_media_impact_on_studies\": raw_smi,\n",
    "                            \"content_type_watched\": raw_ctw,\n",
    "                            \"social_media_impact_on_sleep\": row.get('social_media_impact_on_sleep', 'None').strip(),\n",
    "                            \"social_media_impact_on_focus\": row.get('social_media_impact_on_focus', 'Neutral').strip(),\n",
    "                            \"plays_video_games\": self.str_to_bool(row.get('plays_video_games', '')),\n",
    "                            \"daily_gaming_hours\": self.parse_float(row.get('daily_gaming_hours', '0')),\n",
    "                            \"aware_of_cybersecurity\": self.str_to_bool(row.get('aware_of_cybersecurity', '')),\n",
    "                            \"experienced_electronic_extortion\": self.str_to_bool(row.get('experienced_electronic_extortion', '')),\n",
    "                        }\n",
    "                        SocialMediaAndTechnology.objects.update_or_create(\n",
    "                            student=student_obj,\n",
    "                            defaults=tech_defaults\n",
    "                        )\n",
    "\n",
    "                        success_count += 1\n",
    "\n",
    "                except Exception as e:\n",
    "                    error_count += 1\n",
    "                    self.stderr.write(f\"Error in row {idx+1}: {e}\")\n",
    "\n",
    "            self.stdout.write(\n",
    "                f\"Import completed: {success_count} rows imported successfully, \"\n",
    "                f\"{error_count} rows failed out of {len(rows)} total rows.\"\n",
    "            )\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
